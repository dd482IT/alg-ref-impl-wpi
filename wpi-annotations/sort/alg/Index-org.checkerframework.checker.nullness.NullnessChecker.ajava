package dev.thinke.domain.sort.alg;

import java.util.List;

@org.checkerframework.framework.qual.AnnotatedFor(
    "org.checkerframework.checker.nullness.NullnessChecker")
public record Index<T>(List<T> items) {

  @org.checkerframework.dataflow.qual.Pure
  private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework
      .checker.nullness.qual.NonNull Integer index(
      final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework
              .checker.nullness.qual.NonNull Integer key) {
    return key - 1;
  }

  public T retrieve(
      final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework
              .checker.nullness.qual.NonNull Integer key) {
    return this.items().get(index(key));
  }

  @org.checkerframework.dataflow.qual.Pure
  public T retrieveFirst() {
    return items().get(0);
  }

  public void assign(
      final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework
              .checker.nullness.qual.NonNull Integer key,
      final T element) {
    this.items().set(index(key), element);
  }

  public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker
      .nullness.qual.NonNull Integer add(final T element) {
    items().add(element);
    return items().size();
  }

  public void swap(
      @org.checkerframework.checker.initialization.qual.Initialized
          @org.checkerframework.checker.nullness.qual.NonNull
          Integer first,
      @org.checkerframework.checker.initialization.qual.Initialized
          @org.checkerframework.checker.nullness.qual.NonNull
          Integer second) {
    final T firstItem = items.get(index(first));
    final T secondItem = items.get(index(second));
    items.set(index(first), secondItem);
    items.set(index(second), firstItem);
  }
}
