package dev.thinke.domain.data.graph;

import java.util.HashMap;
import java.util.Map;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class Edge implements Traversable {

    private final Vertex left, right;

    private final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Direction direction;

    private final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Map<String, Object> attributes;

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Boolean visited = Boolean.FALSE;

    public Edge(final Vertex left, final Vertex right, final Direction direction) {
        this.left = left;
        this.right = right;
        this.direction = direction;
        this.attributes = new HashMap<>();
    }

    public Edge(final Vertex left, final Vertex right, final Direction direction, final Map<String, Object> attributes) {
        this.left = left;
        this.right = right;
        this.direction = direction;
        this.attributes = attributes;
    }

    public void addAttribute(final String key, final Object value) {
        this.attributes.put(key, value);
    }

    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Vertex getLeft() {
        return left;
    }

    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Vertex getRight() {
        return right;
    }

    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Direction getDirection() {
        return direction;
    }

    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Boolean getVisited(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Edge this) {
        return visited;
    }

    public void visit(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Edge this) {
        this.visited = Boolean.TRUE;
    }
}
